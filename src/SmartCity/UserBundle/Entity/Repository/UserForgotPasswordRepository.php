<?php

namespace SmartCity\UserBundle\Entity\Repository;

use SmartCity\UserBundle\Entity\User;
use SmartCity\UserBundle\Entity\UserForgotPassword;
use Doctrine\ORM\EntityRepository;

/**
 * UserForgotPasswordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserForgotPasswordRepository extends EntityRepository
{

    /**
     * @param User $user
     * @return UserForgotPassword
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getActiveToken(User $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('t')
            ->from('SmartCityUserBundle:UserForgotPassword', 't')
            ->where($qb->expr()->andX(
                $qb->expr()->eq('t.user', ':user'),
                $qb->expr()->neq('t.used', ':used'),
                $qb->expr()->neq('t.expired', ':expired')
            ))
            ->setMaxResults(1)
            ->setParameter('user', $user)
            ->setParameter('used', true)
            ->setParameter('expired', true);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function expireTimeoutTokens(UserForgotPassword $userForgotPassword)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->update('SmartCityUserBundle:UserForgotPassword', 'u')
            ->set('u.expired', ':expired')
            ->set('u.used', ':used')
            ->where($qb->expr()->andX(
                $qb->expr()->eq('u.id', ':id')
            ))
            ->setParameter('id', $userForgotPassword->getId())
            ->setParameter('expired', true)
            ->setParameter('used', true);

        $qb->getQuery()->execute();
    }

    public function findForgotPasswordbyUser(User $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('fp')
            ->from('SmartCityUserBundle:UserForgotPassword', 'fp')
            ->where($qb->expr()->eq('fp.user', ':user'))
            ->setParameter('user', $user)
            ->setMaxResults(1);
        return $qb->getQuery()->getResult();


    }
}