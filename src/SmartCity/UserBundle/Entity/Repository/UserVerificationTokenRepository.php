<?php

namespace SmartCity\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use SmartCity\UserBundle\Entity\UserVerificationToken;

/**
 * UserVerificationTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserVerificationTokenRepository extends EntityRepository
{

    /**
     * @param $user
     * @return UserVerificationToken
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getActiveToken($user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('t')
            ->from('SmartCityUserBundle:UserVerificationToken', 't')
            ->where($qb->expr()->andX(
                $qb->expr()->eq('t.user', ':user'),
                $qb->expr()->neq('t.used', ':used'),
                $qb->expr()->neq('t.expired', ':expired')
            ))
            ->setMaxResults(1)
            ->setParameter('user', $user)
            ->setParameter('used', true)
            ->setParameter('expired', true);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function expireTimeoutTokens()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->update('SmartCityUserBundle:UserVerificationToken', 'v')
            ->set('v.expired', ':expired')
            ->where($qb->expr()->lte('v.expiresAt', ':now'))
            ->setParameter('now', new \DateTime())
            ->setParameter('expired', true)
        ;

        $qb->getQuery()->execute();
    }
}
